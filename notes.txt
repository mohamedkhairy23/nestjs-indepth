DI ==> Dependency Injection Design Pattern (DI is important to seperate dependencies By IOC)

==> UserController ==> UserService, AuthService ==> UserRepository, AuthRepository, ProductRepository, OrderRepository

==> Instance UserController 
const userController = new UserController(new UserService(new UserRepository(), new AuthService(new AuthRepository())))

==> IOC ==> Inversion of Control ==> Means ==> We don't create instance of class manually, we let the framework create it for us.

==> DI and IOC ==> manage dependencies for us.

-----------------------------------------------------------------------------------------------------------------------------------------------
===> DI Container
==> We can use DI container to manage dependencies for us.
==> UserService ==> UserRepository
==> AuthService ==> AuthRepository

==> Instance UserController 
